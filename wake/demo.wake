def loopbackScalaModule =
  def name = "loopback"
  def path = "{here}/../craft/loopback"
  def scalaVersion = sifiveSkeletonScalaModule.getScalaModuleScalaVersion
  def deps = sifiveBlocksScalaModule, sifiveSkeletonScalaModule, Nil
  makeScalaModule name path scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleDeps deps
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

def pioModule =
  def name = "pio"
  def rootDir = "{here}/../craft/pio"
  def scalaVersion = sifiveSkeletonScalaModule.getScalaModuleScalaVersion
  def deps = loopbackScalaModule, sifiveBlocksScalaModule, sifiveSkeletonScalaModule, Nil
  makeScalaModule name rootDir scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleDeps deps
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

def pioBlock =
  def scalaModule = pioModule
  def config = "sifive.blocks.pio.WithpioTop"
  makeScalaBlock scalaModule config

publish dutSimCompileOptionsHooks = pioHook, loopbackHook, Nil

def loopbackHook =
  def name = "loopback"
  def addSources = source "{here}/../rtl/loopback.v", _
  makeBlackBoxHook name (editDUTSimCompileOptionsSourceFiles addSources)

def pioHook =
  def name = "pio"
  def addSources = source "{here}/../rtl/pio.v", _
  makeBlackBoxHook name (editDUTSimCompileOptionsSourceFiles addSources)

def demo =
  def programName = "demo"
  def cFiles = source "{here}/../tests/demo/main.c", Nil
  makeTestProgramPlan programName cFiles

def dhrystone =
  def programName = "dhrystone"
  def prefix = "{here}/../tests/dhrystone"
  def cFiles = source "{prefix}/dhry_1.c", source "{prefix}/dhry_2.c", Nil
  def withIncludeDirs = prefix, _
  def withExtraCFlags =
    def iterations = 300
    "-specs=nano.specs", "-O3", "-DTIME", "-DNOENUM", "-Wno-implicit",
    "-mexplicit-relocs", "-save-temps", "-fno-inline", "-fno-builtin-printf",
    "-fno-common", "-falign-functions=4", "-Xlinker", "--defsym=__stack_size=0x800",
    "-DDHRY_ITERS={str iterations}", _
  makeTestProgramPlan programName cFiles
  | editTestProgramPlanCFlags withExtraCFlags
  | editTestProgramPlanIncludeDirs withIncludeDirs

global def pioDUT =
  def name = "pioDUT"
  def blocks = pioBlock, Nil
  makeTestSocketDUT name blocks

publish dutTests = demoPioTest, Nil

global def demoPioTest =
  def name = "demo"
  def block = pioBlock
  def program = demo
  def plusargs =
    NamedArg        "verbose",
    NamedArgInteger "random_seed"      1234,
    NamedArgInteger "tilelink_timeout" 16000,
    NamedArgInteger "max-cycles"       50000,
    Nil
  makeBlockTest name block program plusargs
